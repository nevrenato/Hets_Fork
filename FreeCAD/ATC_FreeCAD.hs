{-# OPTIONS -w -O0 #-}
{- |
Module      :  FreeCAD/ATC_FreeCAD.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'FreeCAD.As.Vector3'
'FreeCAD.As.Matrix33'
'FreeCAD.As.Vector4'
'FreeCAD.As.Placement'
'FreeCAD.As.BaseObject'
'FreeCAD.As.Object'
'FreeCAD.As.ExtendedObject'
'FreeCAD.As.PlacedObject'
'FreeCAD.As.NamedObject'
'FreeCAD.As.Sign'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
FreeCAD/As.hs
-}

module FreeCAD.ATC_FreeCAD () where

import ATerm.Lib
import Common.ATerm.ConvInstances
import Data.Typeable
import FreeCAD.As
import qualified Data.Set as Set

{-! for FreeCAD.As.Vector3 derive : Typeable !-}
{-! for FreeCAD.As.Matrix33 derive : Typeable !-}
{-! for FreeCAD.As.Vector4 derive : Typeable !-}
{-! for FreeCAD.As.Placement derive : Typeable !-}
{-! for FreeCAD.As.BaseObject derive : Typeable !-}
{-! for FreeCAD.As.Object derive : Typeable !-}
{-! for FreeCAD.As.ExtendedObject derive : Typeable !-}
{-! for FreeCAD.As.PlacedObject derive : Typeable !-}
{-! for FreeCAD.As.NamedObject derive : Typeable !-}
{-! for FreeCAD.As.Sign derive : Typeable !-}

{-! for FreeCAD.As.Vector3 derive : ShATermConvertible !-}
{-! for FreeCAD.As.Matrix33 derive : ShATermConvertible !-}
{-! for FreeCAD.As.Vector4 derive : ShATermConvertible !-}
{-! for FreeCAD.As.Placement derive : ShATermConvertible !-}
{-! for FreeCAD.As.BaseObject derive : ShATermConvertible !-}
{-! for FreeCAD.As.Object derive : ShATermConvertible !-}
{-! for FreeCAD.As.ExtendedObject derive : ShATermConvertible !-}
{-! for FreeCAD.As.PlacedObject derive : ShATermConvertible !-}
{-! for FreeCAD.As.NamedObject derive : ShATermConvertible !-}
{-! for FreeCAD.As.Sign derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

instance ShATermConvertible Sign where
  toShATermAux att0 xv = case xv of
    Sign a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Sign" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Sign" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Sign a') }
    u -> fromShATermError "Sign" u

instance ShATermConvertible NamedObject where
  toShATermAux att0 xv = case xv of
    NamedObject a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "NamedObject" [a', b'] []) att2
    EmptyObject -> return $ addATerm (ShAAppl "EmptyObject" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "NamedObject" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, NamedObject a' b') }}
    ShAAppl "EmptyObject" [] _ -> (att0, EmptyObject)
    u -> fromShATermError "NamedObject" u

instance ShATermConvertible PlacedObject where
  toShATermAux att0 xv = case xv of
    PlacedObject a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "PlacedObject" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "PlacedObject" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, PlacedObject a' b') }}
    u -> fromShATermError "PlacedObject" u

instance ShATermConvertible ExtendedObject where
  toShATermAux att0 xv = case xv of
    Placed a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Placed" [a'] []) att1
    Ref a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Ref" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Placed" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Placed a') }
    ShAAppl "Ref" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Ref a') }
    u -> fromShATermError "ExtendedObject" u

instance ShATermConvertible Object where
  toShATermAux att0 xv = case xv of
    BaseObject a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "BaseObject" [a'] []) att1
    Cut a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Cut" [a', b'] []) att2
    Common a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Common" [a', b'] []) att2
    Fusion a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Fusion" [a', b'] []) att2
    Extrusion a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Extrusion" [a', b'] []) att2
    Section a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Section" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "BaseObject" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, BaseObject a') }
    ShAAppl "Cut" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Cut a' b') }}
    ShAAppl "Common" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Common a' b') }}
    ShAAppl "Fusion" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Fusion a' b') }}
    ShAAppl "Extrusion" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Extrusion a' b') }}
    ShAAppl "Section" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Section a' b') }}
    u -> fromShATermError "Object" u

instance ShATermConvertible BaseObject where
  toShATermAux att0 xv = case xv of
    Box a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "Box" [a', b', c'] []) att3
    Cylinder a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "Cylinder" [a', b', c'] []) att3
    Sphere a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "Sphere" [a', b', c', d'] []) att4
    Cone a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "Cone" [a', b', c', d'] []) att4
    Torus a b c d e -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      (att5, e') <- toShATerm' att4 e
      return $ addATerm (ShAAppl "Torus" [a', b', c', d', e'] []) att5
    Line a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Line" [a'] []) att1
    Circle a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "Circle" [a', b', c'] []) att3
    Rectangle a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Rectangle" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Box" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, Box a' b' c') }}}
    ShAAppl "Cylinder" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, Cylinder a' b' c') }}}
    ShAAppl "Sphere" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, Sphere a' b' c' d') }}}}
    ShAAppl "Cone" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, Cone a' b' c' d') }}}}
    ShAAppl "Torus" [a, b, c, d, e] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      case fromShATerm' e att4 of
      { (att5, e') ->
      (att5, Torus a' b' c' d' e') }}}}}
    ShAAppl "Line" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Line a') }
    ShAAppl "Circle" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, Circle a' b' c') }}}
    ShAAppl "Rectangle" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Rectangle a' b') }}
    u -> fromShATermError "BaseObject" u

instance ShATermConvertible Placement where
  toShATermAux att0 xv = case xv of
    Placement a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Placement" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Placement" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Placement a' b') }}
    u -> fromShATermError "Placement" u

instance ShATermConvertible Vector4 where
  toShATermAux att0 xv = case xv of
    Vector4 a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "Vector4" [a', b', c', d'] []) att4
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Vector4" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, Vector4 a' b' c' d') }}}}
    u -> fromShATermError "Vector4" u

instance ShATermConvertible Matrix33 where
  toShATermAux att0 xv = case xv of
    Matrix33 a b c d e f g h i -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      (att5, e') <- toShATerm' att4 e
      (att6, f') <- toShATerm' att5 f
      (att7, g') <- toShATerm' att6 g
      (att8, h') <- toShATerm' att7 h
      (att9, i') <- toShATerm' att8 i
      return $ addATerm (ShAAppl "Matrix33" [a', b', c', d', e', f', g',
                                             h', i'] []) att9
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Matrix33" [a, b, c, d, e, f, g, h, i] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      case fromShATerm' e att4 of
      { (att5, e') ->
      case fromShATerm' f att5 of
      { (att6, f') ->
      case fromShATerm' g att6 of
      { (att7, g') ->
      case fromShATerm' h att7 of
      { (att8, h') ->
      case fromShATerm' i att8 of
      { (att9, i') ->
      (att9, Matrix33 a' b' c' d' e' f' g' h' i') }}}}}}}}}
    u -> fromShATermError "Matrix33" u

instance ShATermConvertible Vector3 where
  toShATermAux att0 xv = case xv of
    Vector3 a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "Vector3" [a', b', c'] []) att3
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Vector3" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, Vector3 a' b' c') }}}
    u -> fromShATermError "Vector3" u

_tcSignTc :: TyCon
_tcSignTc = mkTyCon "FreeCAD.As.Sign"
instance Typeable Sign where
    typeOf _ = mkTyConApp _tcSignTc []

_tcNamedObjectTc :: TyCon
_tcNamedObjectTc = mkTyCon "FreeCAD.As.NamedObject"
instance Typeable NamedObject where
    typeOf _ = mkTyConApp _tcNamedObjectTc []

_tcPlacedObjectTc :: TyCon
_tcPlacedObjectTc = mkTyCon "FreeCAD.As.PlacedObject"
instance Typeable PlacedObject where
    typeOf _ = mkTyConApp _tcPlacedObjectTc []

_tcExtendedObjectTc :: TyCon
_tcExtendedObjectTc = mkTyCon "FreeCAD.As.ExtendedObject"
instance Typeable ExtendedObject where
    typeOf _ = mkTyConApp _tcExtendedObjectTc []

_tcObjectTc :: TyCon
_tcObjectTc = mkTyCon "FreeCAD.As.Object"
instance Typeable Object where
    typeOf _ = mkTyConApp _tcObjectTc []

_tcBaseObjectTc :: TyCon
_tcBaseObjectTc = mkTyCon "FreeCAD.As.BaseObject"
instance Typeable BaseObject where
    typeOf _ = mkTyConApp _tcBaseObjectTc []

_tcPlacementTc :: TyCon
_tcPlacementTc = mkTyCon "FreeCAD.As.Placement"
instance Typeable Placement where
    typeOf _ = mkTyConApp _tcPlacementTc []

_tcVector4Tc :: TyCon
_tcVector4Tc = mkTyCon "FreeCAD.As.Vector4"
instance Typeable Vector4 where
    typeOf _ = mkTyConApp _tcVector4Tc []

_tcMatrix33Tc :: TyCon
_tcMatrix33Tc = mkTyCon "FreeCAD.As.Matrix33"
instance Typeable Matrix33 where
    typeOf _ = mkTyConApp _tcMatrix33Tc []

_tcVector3Tc :: TyCon
_tcVector3Tc = mkTyCon "FreeCAD.As.Vector3"
instance Typeable Vector3 where
    typeOf _ = mkTyConApp _tcVector3Tc []
