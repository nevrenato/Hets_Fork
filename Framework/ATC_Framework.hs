{-# OPTIONS -w -O0 #-}
{- |
Module      :  Framework/ATC_Framework.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'Framework.AS.FRAM'
'Framework.AS.LogicDef'
'Framework.AS.ComorphismDef'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
Framework/AS.hs
-}

module Framework.ATC_Framework () where

import ATC.AS_Annotation
import ATerm.Lib
import Common.Doc
import Common.DocUtils
import Common.IRI (IRI)
import Common.Id
import Common.Keywords
import Data.Typeable
import Framework.AS

{-! for Framework.AS.FRAM derive : Typeable !-}
{-! for Framework.AS.LogicDef derive : Typeable !-}
{-! for Framework.AS.ComorphismDef derive : Typeable !-}

{-! for Framework.AS.FRAM derive : ShATermConvertible !-}
{-! for Framework.AS.LogicDef derive : ShATermConvertible !-}
{-! for Framework.AS.ComorphismDef derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

_tcFRAMTc :: TyCon
_tcFRAMTc = mkTyCon "Framework.AS.FRAM"
instance Typeable FRAM where
    typeOf _ = mkTyConApp _tcFRAMTc []

_tcLogicDefTc :: TyCon
_tcLogicDefTc = mkTyCon "Framework.AS.LogicDef"
instance Typeable LogicDef where
    typeOf _ = mkTyConApp _tcLogicDefTc []

_tcComorphismDefTc :: TyCon
_tcComorphismDefTc = mkTyCon "Framework.AS.ComorphismDef"
instance Typeable ComorphismDef where
    typeOf _ = mkTyConApp _tcComorphismDefTc []

instance ShATermConvertible FRAM where
  toShATermAux att0 xv = case xv of
    LF -> return $ addATerm (ShAAppl "LF" [] []) att0
    Isabelle -> return $ addATerm (ShAAppl "Isabelle" [] []) att0
    Maude -> return $ addATerm (ShAAppl "Maude" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "LF" [] _ -> (att0, LF)
    ShAAppl "Isabelle" [] _ -> (att0, Isabelle)
    ShAAppl "Maude" [] _ -> (att0, Maude)
    u -> fromShATermError "FRAM" u

instance ShATermConvertible LogicDef where
  toShATermAux att0 xv = case xv of
    LogicDef a b c d e f g -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      (att5, e') <- toShATerm' att4 e
      (att6, f') <- toShATerm' att5 f
      (att7, g') <- toShATerm' att6 g
      return $ addATerm (ShAAppl "LogicDef" [a', b', c', d', e', f',
                                             g'] []) att7
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "LogicDef" [a, b, c, d, e, f, g] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      case fromShATerm' e att4 of
      { (att5, e') ->
      case fromShATerm' f att5 of
      { (att6, f') ->
      case fromShATerm' g att6 of
      { (att7, g') ->
      (att7, LogicDef a' b' c' d' e' f' g') }}}}}}}
    u -> fromShATermError "LogicDef" u

instance ShATermConvertible ComorphismDef where
  toShATermAux att0 xv = case xv of
    ComorphismDef a b c d e f g -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      (att5, e') <- toShATerm' att4 e
      (att6, f') <- toShATerm' att5 f
      (att7, g') <- toShATerm' att6 g
      return $ addATerm (ShAAppl "ComorphismDef" [a', b', c', d', e', f',
                                                  g'] []) att7
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "ComorphismDef" [a, b, c, d, e, f, g] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      case fromShATerm' e att4 of
      { (att5, e') ->
      case fromShATerm' f att5 of
      { (att6, f') ->
      case fromShATerm' g att6 of
      { (att7, g') ->
      (att7, ComorphismDef a' b' c' d' e' f' g') }}}}}}}
    u -> fromShATermError "ComorphismDef" u
