{-# OPTIONS -w -O0 #-}
{- |
Module      :  CommonLogic/ATC_CommonLogic.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'CommonLogic.AS_CommonLogic.BASIC_SPEC'
'CommonLogic.AS_CommonLogic.BASIC_ITEMS'
'CommonLogic.AS_CommonLogic.TEXT_META'
'CommonLogic.AS_CommonLogic.TEXT'
'CommonLogic.AS_CommonLogic.PHRASE'
'CommonLogic.AS_CommonLogic.COMMENT'
'CommonLogic.AS_CommonLogic.MODULE'
'CommonLogic.AS_CommonLogic.IMPORTATION'
'CommonLogic.AS_CommonLogic.SENTENCE'
'CommonLogic.AS_CommonLogic.QUANT_SENT'
'CommonLogic.AS_CommonLogic.BOOL_SENT'
'CommonLogic.AS_CommonLogic.ATOM'
'CommonLogic.AS_CommonLogic.TERM'
'CommonLogic.AS_CommonLogic.TERM_SEQ'
'CommonLogic.AS_CommonLogic.NAME_OR_SEQMARK'
'CommonLogic.AS_CommonLogic.SYMB_MAP_ITEMS'
'CommonLogic.AS_CommonLogic.SYMB_OR_MAP'
'CommonLogic.AS_CommonLogic.SYMB_ITEMS'
'CommonLogic.Sign.Sign'
'CommonLogic.Symbol.Symbol'
'CommonLogic.Morphism.Morphism'
'CommonLogic.Sublogic.CLTextType'
'CommonLogic.Sublogic.CommonLogicSL'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
CommonLogic/AS_CommonLogic.hs
CommonLogic/Sign.hs
CommonLogic/Symbol.hs
CommonLogic/Morphism.hs
CommonLogic/Sublogic.hs
-}

module CommonLogic.ATC_CommonLogic () where

import ATC.AS_Annotation
import ATerm.Lib
import Common.Doc
import Common.DocUtils
import Common.IRI
import Common.Id
import Common.Id as Id
import Common.Keywords
import Common.Result
import CommonLogic.AS_CommonLogic
import CommonLogic.AS_CommonLogic as AS
import CommonLogic.Morphism
import CommonLogic.Morphism as Morphism
import CommonLogic.Sign
import CommonLogic.Sign as Sign
import CommonLogic.Sublogic
import CommonLogic.Symbol
import CommonLogic.Tools
import Data.List (isPrefixOf)
import Data.Set (Set)
import Data.Typeable
import qualified Common.AS_Annotation as AS_Anno
import qualified Common.Id as Id
import qualified Common.Result as Result
import qualified CommonLogic.AS_CommonLogic as AS
import qualified CommonLogic.Morphism as Morphism
import qualified CommonLogic.Sign as Sign
import qualified CommonLogic.Symbol as Symbol
import qualified Data.Map as Map
import qualified Data.Set as Set

{-! for CommonLogic.AS_CommonLogic.BASIC_SPEC derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.BASIC_ITEMS derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.TEXT_META derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.TEXT derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.PHRASE derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.COMMENT derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.MODULE derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.IMPORTATION derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.SENTENCE derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.QUANT_SENT derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.BOOL_SENT derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.ATOM derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.TERM derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.TERM_SEQ derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.NAME_OR_SEQMARK derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.SYMB_MAP_ITEMS derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.SYMB_OR_MAP derive : Typeable !-}
{-! for CommonLogic.AS_CommonLogic.SYMB_ITEMS derive : Typeable !-}
{-! for CommonLogic.Sign.Sign derive : Typeable !-}
{-! for CommonLogic.Symbol.Symbol derive : Typeable !-}
{-! for CommonLogic.Morphism.Morphism derive : Typeable !-}
{-! for CommonLogic.Sublogic.CLTextType derive : Typeable !-}
{-! for CommonLogic.Sublogic.CommonLogicSL derive : Typeable !-}

{-! for CommonLogic.AS_CommonLogic.BASIC_SPEC derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.BASIC_ITEMS derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.TEXT_META derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.TEXT derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.PHRASE derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.COMMENT derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.MODULE derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.IMPORTATION derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.SENTENCE derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.QUANT_SENT derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.BOOL_SENT derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.ATOM derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.TERM derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.TERM_SEQ derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.NAME_OR_SEQMARK derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.SYMB_MAP_ITEMS derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.SYMB_OR_MAP derive : ShATermConvertible !-}
{-! for CommonLogic.AS_CommonLogic.SYMB_ITEMS derive : ShATermConvertible !-}
{-! for CommonLogic.Sign.Sign derive : ShATermConvertible !-}
{-! for CommonLogic.Symbol.Symbol derive : ShATermConvertible !-}
{-! for CommonLogic.Morphism.Morphism derive : ShATermConvertible !-}
{-! for CommonLogic.Sublogic.CLTextType derive : ShATermConvertible !-}
{-! for CommonLogic.Sublogic.CommonLogicSL derive : ShATermConvertible !-}
