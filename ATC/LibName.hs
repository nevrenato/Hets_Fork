{-# OPTIONS -w -O0 #-}
{- |
Module      :  ATC/LibName.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'Common.LibName.LibName'
'Common.LibName.LibId'
'Common.LibName.VersionNumber'
'Common.LibName.LinkPath'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
Common/LibName.hs
-}

module ATC.LibName () where

import ATC.Id
import ATerm.Lib
import Common.ATerm.ConvInstances
import Common.Doc
import Common.DocUtils
import Common.Id
import Common.Keywords
import Common.LibName
import Common.Utils
import Data.Char
import Data.Graph.Inductive.Graph
import Data.List
import Data.Ord
import Data.Typeable
import System.FilePath
import System.Time

{-! for Common.LibName.LibName derive : Typeable !-}
{-! for Common.LibName.LibId derive : Typeable !-}
{-! for Common.LibName.VersionNumber derive : Typeable !-}
{-! for Common.LibName.LinkPath derive : Typeable !-}

{-! for Common.LibName.LibName derive : ShATermConvertible !-}
{-! for Common.LibName.LibId derive : ShATermConvertible !-}
{-! for Common.LibName.VersionNumber derive : ShATermConvertible !-}
{-! for Common.LibName.LinkPath derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

_tcLibNameTc :: TyCon
_tcLibNameTc = mkTyCon "Common.LibName.LibName"
instance Typeable LibName where
    typeOf _ = mkTyConApp _tcLibNameTc []

_tcLibIdTc :: TyCon
_tcLibIdTc = mkTyCon "Common.LibName.LibId"
instance Typeable LibId where
    typeOf _ = mkTyConApp _tcLibIdTc []

_tcVersionNumberTc :: TyCon
_tcVersionNumberTc = mkTyCon "Common.LibName.VersionNumber"
instance Typeable VersionNumber where
    typeOf _ = mkTyConApp _tcVersionNumberTc []

_tcLinkPathTc :: TyCon
_tcLinkPathTc = mkTyCon "Common.LibName.LinkPath"
instance Typeable1 LinkPath where
    typeOf1 _ = mkTyConApp _tcLinkPathTc []

instance ShATermConvertible LibName where
  toShATermAux att0 xv = case xv of
    LibName a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "LibName" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "LibName" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, LibName a' b') }}
    u -> fromShATermError "LibName" u

instance ShATermConvertible LibId where
  toShATermAux att0 xv = case xv of
    IndirectLink a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "IndirectLink" [a', b', c', d'] []) att4
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "IndirectLink" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, IndirectLink a' b' c' d') }}}}
    u -> fromShATermError "LibId" u

instance ShATermConvertible VersionNumber where
  toShATermAux att0 xv = case xv of
    VersionNumber a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "VersionNumber" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "VersionNumber" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, VersionNumber a' b') }}
    u -> fromShATermError "VersionNumber" u

instance ShATermConvertible a => ShATermConvertible (LinkPath a) where
  toShATermAux att0 xv = case xv of
    LinkPath a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "LinkPath" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "LinkPath" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, LinkPath a' b') }}
    u -> fromShATermError "LinkPath" u
