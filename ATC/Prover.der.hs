{-# OPTIONS -w -O0 #-}
{- |
Module      :  ATC/Prover.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'Logic.Prover.ThmStatus'
'Logic.Prover.Theory'
'Logic.Prover.TacticScript'
'Logic.Prover.Reason'
'Logic.Prover.GoalStatus'
'Logic.Prover.ProofStatus'
'Logic.Prover.ProverKind'
'Logic.Prover.FreeDefMorphism'
'Logic.Prover.TheoryMorphism'
'Logic.Prover.CCStatus'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
Logic/Prover.hs
-}

module ATC.Prover () where

import ATC.AS_Annotation
import ATC.OrderedMap
import ATerm.Lib
import Common.AS_Annotation as AS_Anno
import Common.Doc
import Common.DocUtils
import Common.ProofUtils
import Common.Result
import Control.Monad
import Data.List
import Data.Maybe (isJust)
import Data.Time (TimeOfDay, midnight)
import Data.Typeable
import Logic.Prover
import qualified Common.OrderedMap as OMap
import qualified Control.Concurrent as Concurrent
import qualified Data.Map as Map

{-! for Logic.Prover.ThmStatus derive : Typeable !-}
{-! for Logic.Prover.Theory derive : Typeable !-}
{-! for Logic.Prover.TacticScript derive : Typeable !-}
{-! for Logic.Prover.Reason derive : Typeable !-}
{-! for Logic.Prover.GoalStatus derive : Typeable !-}
{-! for Logic.Prover.ProofStatus derive : Typeable !-}
{-! for Logic.Prover.ProverKind derive : Typeable !-}
{-! for Logic.Prover.FreeDefMorphism derive : Typeable !-}
{-! for Logic.Prover.TheoryMorphism derive : Typeable !-}
{-! for Logic.Prover.CCStatus derive : Typeable !-}

{-! for Logic.Prover.ThmStatus derive : ShATermConvertible !-}
{-! for Logic.Prover.Theory derive : ShATermConvertible !-}
{-! for Logic.Prover.TacticScript derive : ShATermConvertible !-}
{-! for Logic.Prover.Reason derive : ShATermConvertible !-}
{-! for Logic.Prover.GoalStatus derive : ShATermConvertible !-}
{-! for Logic.Prover.ProofStatus derive : ShATermConvertible !-}
{-! for Logic.Prover.ProverKind derive : ShATermConvertible !-}
{-! for Logic.Prover.FreeDefMorphism derive : ShATermConvertible !-}
{-! for Logic.Prover.TheoryMorphism derive : ShATermConvertible !-}
{-! for Logic.Prover.CCStatus derive : ShATermConvertible !-}
