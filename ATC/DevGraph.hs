{-# OPTIONS -w -O0 #-}
{- |
Module      :  ATC/DevGraph.der.hs
Description :  generated Typeable, ShATermLG instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermLG
  for the type(s):
'Static.DevGraph.NodeSig'
'Static.DevGraph.MaybeNode'
'Static.DevGraph.Renamed'
'Static.DevGraph.MaybeRestricted'
'Static.DevGraph.DGOrigin'
'Static.DevGraph.DGNodeInfo'
'Static.DevGraph.DGNodeLab'
'Static.DevGraph.Fitted'
'Static.DevGraph.DGLinkOrigin'
'Static.DevGraph.DGLinkType'
'Static.DevGraph.DGLinkLab'
'Static.DevGraph.GenSig'
'Static.DevGraph.ExtGenSig'
'Static.DevGraph.ExtViewSig'
'Static.DevGraph.UnitSig'
'Static.DevGraph.ImpUnitSigOrSig'
'Static.DevGraph.RefSig'
'Static.DevGraph.BranchSig'
'Static.DevGraph.GlobalEntry'
'Static.DevGraph.DGChange'
'Static.DevGraph.HistElem'
'Static.DevGraph.RTNodeType'
'Static.DevGraph.RTNodeLab'
'Static.DevGraph.RTLinkType'
'Static.DevGraph.RTLinkLab'
'Static.DevGraph.DiagNodeLab'
'Static.DevGraph.DiagLinkLab'
'Static.DevGraph.Diag'
'Static.DevGraph.DGraph'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
Static/DevGraph.hs
-}

module ATC.DevGraph () where

import ATC.AS_Library
import ATC.Grothendieck
import ATC.XGraph
import ATerm.Lib
import Common.AS_Annotation
import Common.Consistency
import Common.GlobalAnnotations
import Common.IRI
import Common.Id
import Common.LibName
import Common.Result
import Control.Concurrent.MVar
import Data.Graph.Inductive.Basic
import Data.Graph.Inductive.Graph as Graph
import Data.Graph.Inductive.Query.DFS
import Data.List
import Data.Maybe
import Data.Ord
import Data.Typeable
import Logic.Comorphism
import Logic.ExtSign
import Logic.Grothendieck
import Logic.Logic
import Logic.Prover
import Static.DevGraph
import Static.DgUtils
import Static.GTheory
import Syntax.AS_Library
import Syntax.AS_Structured
import qualified Common.Lib.Graph as Tree
import qualified Common.Lib.MapSet as MapSet
import qualified Common.Lib.Rel as Rel
import qualified Common.Lib.SizedList as SizedList
import qualified Common.OrderedMap as OMap
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Static.XGraph as XGraph

{-! for Static.DevGraph.NodeSig derive : Typeable !-}
{-! for Static.DevGraph.MaybeNode derive : Typeable !-}
{-! for Static.DevGraph.Renamed derive : Typeable !-}
{-! for Static.DevGraph.MaybeRestricted derive : Typeable !-}
{-! for Static.DevGraph.DGOrigin derive : Typeable !-}
{-! for Static.DevGraph.DGNodeInfo derive : Typeable !-}
{-! for Static.DevGraph.DGNodeLab derive : Typeable !-}
{-! for Static.DevGraph.Fitted derive : Typeable !-}
{-! for Static.DevGraph.DGLinkOrigin derive : Typeable !-}
{-! for Static.DevGraph.DGLinkType derive : Typeable !-}
{-! for Static.DevGraph.DGLinkLab derive : Typeable !-}
{-! for Static.DevGraph.GenSig derive : Typeable !-}
{-! for Static.DevGraph.ExtGenSig derive : Typeable !-}
{-! for Static.DevGraph.ExtViewSig derive : Typeable !-}
{-! for Static.DevGraph.UnitSig derive : Typeable !-}
{-! for Static.DevGraph.ImpUnitSigOrSig derive : Typeable !-}
{-! for Static.DevGraph.RefSig derive : Typeable !-}
{-! for Static.DevGraph.BranchSig derive : Typeable !-}
{-! for Static.DevGraph.GlobalEntry derive : Typeable !-}
{-! for Static.DevGraph.DGChange derive : Typeable !-}
{-! for Static.DevGraph.HistElem derive : Typeable !-}
{-! for Static.DevGraph.RTNodeType derive : Typeable !-}
{-! for Static.DevGraph.RTNodeLab derive : Typeable !-}
{-! for Static.DevGraph.RTLinkType derive : Typeable !-}
{-! for Static.DevGraph.RTLinkLab derive : Typeable !-}
{-! for Static.DevGraph.DiagNodeLab derive : Typeable !-}
{-! for Static.DevGraph.DiagLinkLab derive : Typeable !-}
{-! for Static.DevGraph.Diag derive : Typeable !-}
{-! for Static.DevGraph.DGraph derive : Typeable !-}

{-! for Static.DevGraph.NodeSig derive : ShATermLG !-}
{-! for Static.DevGraph.MaybeNode derive : ShATermLG !-}
{-! for Static.DevGraph.Renamed derive : ShATermLG !-}
{-! for Static.DevGraph.MaybeRestricted derive : ShATermLG !-}
{-! for Static.DevGraph.DGOrigin derive : ShATermLG !-}
{-! for Static.DevGraph.DGNodeInfo derive : ShATermLG !-}
{-! for Static.DevGraph.DGNodeLab derive : ShATermLG !-}
{-! for Static.DevGraph.Fitted derive : ShATermLG !-}
{-! for Static.DevGraph.DGLinkOrigin derive : ShATermLG !-}
{-! for Static.DevGraph.DGLinkType derive : ShATermLG !-}
{-! for Static.DevGraph.DGLinkLab derive : ShATermLG !-}
{-! for Static.DevGraph.GenSig derive : ShATermLG !-}
{-! for Static.DevGraph.ExtGenSig derive : ShATermLG !-}
{-! for Static.DevGraph.ExtViewSig derive : ShATermLG !-}
{-! for Static.DevGraph.UnitSig derive : ShATermLG !-}
{-! for Static.DevGraph.ImpUnitSigOrSig derive : ShATermLG !-}
{-! for Static.DevGraph.RefSig derive : ShATermLG !-}
{-! for Static.DevGraph.BranchSig derive : ShATermLG !-}
{-! for Static.DevGraph.GlobalEntry derive : ShATermLG !-}
{-! for Static.DevGraph.DGChange derive : ShATermLG !-}
{-! for Static.DevGraph.HistElem derive : ShATermLG !-}
{-! for Static.DevGraph.RTNodeType derive : ShATermLG !-}
{-! for Static.DevGraph.RTNodeLab derive : ShATermLG !-}
{-! for Static.DevGraph.RTLinkType derive : ShATermLG !-}
{-! for Static.DevGraph.RTLinkLab derive : ShATermLG !-}
{-! for Static.DevGraph.DiagNodeLab derive : ShATermLG !-}
{-! for Static.DevGraph.DiagLinkLab derive : ShATermLG !-}
{-! for Static.DevGraph.Diag derive : ShATermLG !-}
{-! for Static.DevGraph.DGraph derive : ShATermLG !-}

-- Generated by DrIFT, look but don't touch!

instance ShATermLG DGraph where
  toShATermLG att0 xv = case xv of
    DGraph a b c d e f g h i j k l m n o p -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      (att3, c') <- toShATermLG' att2 c
      (att4, d') <- toShATermLG' att3 d
      (att5, e') <- toShATermLG' att4 e
      (att6, f') <- toShATermLG' att5 f
      (att7, g') <- toShATermLG' att6 g
      (att8, h') <- toShATermLG' att7 h
      (att9, i') <- toShATermLG' att8 i
      (att10, j') <- toShATermLG' att9 j
      (att11, k') <- toShATermLG' att10 k
      (att12, l') <- toShATermLG' att11 l
      (att13, m') <- toShATermLG' att12 m
      (att14, n') <- toShATermLG' att13 n
      (att15, o') <- toShATermLG' att14 o
      (att16, p') <- toShATermLG' att15 p
      return $ addATerm (ShAAppl "DGraph" [a', b', c', d', e', f', g',
                                           h', i', j', k', l', m', n', o', p'] []) att16
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "DGraph" [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o,
                      p] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      case fromShATermLG' lg c att2 of
      { (att3, c') ->
      case fromShATermLG' lg d att3 of
      { (att4, d') ->
      case fromShATermLG' lg e att4 of
      { (att5, e') ->
      case fromShATermLG' lg f att5 of
      { (att6, f') ->
      case fromShATermLG' lg g att6 of
      { (att7, g') ->
      case fromShATermLG' lg h att7 of
      { (att8, h') ->
      case fromShATermLG' lg i att8 of
      { (att9, i') ->
      case fromShATermLG' lg j att9 of
      { (att10, j') ->
      case fromShATermLG' lg k att10 of
      { (att11, k') ->
      case fromShATermLG' lg l att11 of
      { (att12, l') ->
      case fromShATermLG' lg m att12 of
      { (att13, m') ->
      case fromShATermLG' lg n att13 of
      { (att14, n') ->
      case fromShATermLG' lg o att14 of
      { (att15, o') ->
      case fromShATermLG' lg p att15 of
      { (att16, p') ->
      (att16, DGraph a' b' c' d' e' f' g' h' i' j' k' l' m' n' o'
              p') }}}}}}}}}}}}}}}}
    u -> fromShATermError "DGraph" u

instance ShATermLG Diag where
  toShATermLG att0 xv = case xv of
    Diagram a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "Diagram" [a', b'] []) att2
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "Diagram" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, Diagram a' b') }}
    u -> fromShATermError "Diag" u

instance ShATermLG DiagLinkLab where
  toShATermLG att0 xv = case xv of
    DiagLink a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "DiagLink" [a', b'] []) att2
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "DiagLink" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, DiagLink a' b') }}
    u -> fromShATermError "DiagLinkLab" u

instance ShATermLG DiagNodeLab where
  toShATermLG att0 xv = case xv of
    DiagNode a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "DiagNode" [a', b'] []) att2
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "DiagNode" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, DiagNode a' b') }}
    u -> fromShATermError "DiagNodeLab" u

instance ShATermLG RTLinkLab where
  toShATermLG att0 xv = case xv of
    RTLink a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "RTLink" [a'] []) att1
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "RTLink" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, RTLink a') }
    u -> fromShATermError "RTLinkLab" u

instance ShATermLG RTLinkType where
  toShATermLG att0 xv = case xv of
    RTRefine -> return $ addATerm (ShAAppl "RTRefine" [] []) att0
    RTComp -> return $ addATerm (ShAAppl "RTComp" [] []) att0
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "RTRefine" [] _ -> (att0, RTRefine)
    ShAAppl "RTComp" [] _ -> (att0, RTComp)
    u -> fromShATermError "RTLinkType" u

instance ShATermLG RTNodeLab where
  toShATermLG att0 xv = case xv of
    RTNodeLab a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "RTNodeLab" [a', b'] []) att2
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "RTNodeLab" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, RTNodeLab a' b') }}
    u -> fromShATermError "RTNodeLab" u

instance ShATermLG RTNodeType where
  toShATermLG att0 xv = case xv of
    RTPlain a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "RTPlain" [a'] []) att1
    RTRef a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "RTRef" [a'] []) att1
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "RTPlain" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, RTPlain a') }
    ShAAppl "RTRef" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, RTRef a') }
    u -> fromShATermError "RTNodeType" u

instance ShATermLG HistElem where
  toShATermLG att0 xv = case xv of
    HistElem a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "HistElem" [a'] []) att1
    HistGroup a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "HistGroup" [a', b'] []) att2
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "HistElem" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, HistElem a') }
    ShAAppl "HistGroup" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, HistGroup a' b') }}
    u -> fromShATermError "HistElem" u

instance ShATermLG DGChange where
  toShATermLG att0 xv = case xv of
    InsertNode a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "InsertNode" [a'] []) att1
    DeleteNode a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DeleteNode" [a'] []) att1
    InsertEdge a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "InsertEdge" [a'] []) att1
    DeleteEdge a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DeleteEdge" [a'] []) att1
    SetNodeLab a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "SetNodeLab" [a', b'] []) att2
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "InsertNode" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, InsertNode a') }
    ShAAppl "DeleteNode" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DeleteNode a') }
    ShAAppl "InsertEdge" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, InsertEdge a') }
    ShAAppl "DeleteEdge" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DeleteEdge a') }
    ShAAppl "SetNodeLab" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, SetNodeLab a' b') }}
    u -> fromShATermError "DGChange" u

instance ShATermLG GlobalEntry where
  toShATermLG att0 xv = case xv of
    SpecEntry a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "SpecEntry" [a'] []) att1
    ViewOrStructEntry a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "ViewOrStructEntry" [a', b'] []) att2
    ArchOrRefEntry a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "ArchOrRefEntry" [a', b'] []) att2
    UnitEntry a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "UnitEntry" [a'] []) att1
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "SpecEntry" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, SpecEntry a') }
    ShAAppl "ViewOrStructEntry" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, ViewOrStructEntry a' b') }}
    ShAAppl "ArchOrRefEntry" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, ArchOrRefEntry a' b') }}
    ShAAppl "UnitEntry" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, UnitEntry a') }
    u -> fromShATermError "GlobalEntry" u

instance ShATermLG BranchSig where
  toShATermLG att0 xv = case xv of
    UnitSigAsBranchSig a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "UnitSigAsBranchSig" [a'] []) att1
    BranchStaticContext a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "BranchStaticContext" [a'] []) att1
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "UnitSigAsBranchSig" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, UnitSigAsBranchSig a') }
    ShAAppl "BranchStaticContext" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, BranchStaticContext a') }
    u -> fromShATermError "BranchSig" u

instance ShATermLG RefSig where
  toShATermLG att0 xv = case xv of
    BranchRefSig a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "BranchRefSig" [a', b'] []) att2
    ComponentRefSig a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "ComponentRefSig" [a', b'] []) att2
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "BranchRefSig" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, BranchRefSig a' b') }}
    ShAAppl "ComponentRefSig" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, ComponentRefSig a' b') }}
    u -> fromShATermError "RefSig" u

instance ShATermLG ImpUnitSigOrSig where
  toShATermLG att0 xv = case xv of
    ImpUnitSig a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "ImpUnitSig" [a', b'] []) att2
    Sig a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "Sig" [a'] []) att1
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "ImpUnitSig" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, ImpUnitSig a' b') }}
    ShAAppl "Sig" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, Sig a') }
    u -> fromShATermError "ImpUnitSigOrSig" u

instance ShATermLG UnitSig where
  toShATermLG att0 xv = case xv of
    UnitSig a b c -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      (att3, c') <- toShATermLG' att2 c
      return $ addATerm (ShAAppl "UnitSig" [a', b', c'] []) att3
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "UnitSig" [a, b, c] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      case fromShATermLG' lg c att2 of
      { (att3, c') ->
      (att3, UnitSig a' b' c') }}}
    u -> fromShATermError "UnitSig" u

instance ShATermLG ExtViewSig where
  toShATermLG att0 xv = case xv of
    ExtViewSig a b c -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      (att3, c') <- toShATermLG' att2 c
      return $ addATerm (ShAAppl "ExtViewSig" [a', b', c'] []) att3
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "ExtViewSig" [a, b, c] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      case fromShATermLG' lg c att2 of
      { (att3, c') ->
      (att3, ExtViewSig a' b' c') }}}
    u -> fromShATermError "ExtViewSig" u

instance ShATermLG ExtGenSig where
  toShATermLG att0 xv = case xv of
    ExtGenSig a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "ExtGenSig" [a', b'] []) att2
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "ExtGenSig" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, ExtGenSig a' b') }}
    u -> fromShATermError "ExtGenSig" u

instance ShATermLG GenSig where
  toShATermLG att0 xv = case xv of
    GenSig a b c -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      (att3, c') <- toShATermLG' att2 c
      return $ addATerm (ShAAppl "GenSig" [a', b', c'] []) att3
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "GenSig" [a, b, c] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      case fromShATermLG' lg c att2 of
      { (att3, c') ->
      (att3, GenSig a' b' c') }}}
    u -> fromShATermError "GenSig" u

instance ShATermLG DGLinkLab where
  toShATermLG att0 xv = case xv of
    DGLink a b c d e f -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      (att3, c') <- toShATermLG' att2 c
      (att4, d') <- toShATermLG' att3 d
      (att5, e') <- toShATermLG' att4 e
      (att6, f') <- toShATermLG' att5 f
      return $ addATerm (ShAAppl "DGLink" [a', b', c', d', e',
                                           f'] []) att6
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "DGLink" [a, b, c, d, e, f] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      case fromShATermLG' lg c att2 of
      { (att3, c') ->
      case fromShATermLG' lg d att3 of
      { (att4, d') ->
      case fromShATermLG' lg e att4 of
      { (att5, e') ->
      case fromShATermLG' lg f att5 of
      { (att6, f') ->
      (att6, DGLink a' b' c' d' e' f') }}}}}}
    u -> fromShATermError "DGLinkLab" u

instance ShATermLG DGLinkType where
  toShATermLG att0 xv = case xv of
    ScopedLink a b c -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      (att3, c') <- toShATermLG' att2 c
      return $ addATerm (ShAAppl "ScopedLink" [a', b', c'] []) att3
    HidingDefLink -> return $ addATerm (ShAAppl "HidingDefLink" [] []) att0
    FreeOrCofreeDefLink a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "FreeOrCofreeDefLink" [a', b'] []) att2
    HidingFreeOrCofreeThm a b c d -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      (att3, c') <- toShATermLG' att2 c
      (att4, d') <- toShATermLG' att3 d
      return $ addATerm (ShAAppl "HidingFreeOrCofreeThm" [a', b', c',
                                                          d'] []) att4
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "ScopedLink" [a, b, c] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      case fromShATermLG' lg c att2 of
      { (att3, c') ->
      (att3, ScopedLink a' b' c') }}}
    ShAAppl "HidingDefLink" [] _ -> (att0, HidingDefLink)
    ShAAppl "FreeOrCofreeDefLink" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, FreeOrCofreeDefLink a' b') }}
    ShAAppl "HidingFreeOrCofreeThm" [a, b, c, d] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      case fromShATermLG' lg c att2 of
      { (att3, c') ->
      case fromShATermLG' lg d att3 of
      { (att4, d') ->
      (att4, HidingFreeOrCofreeThm a' b' c' d') }}}}
    u -> fromShATermError "DGLinkType" u

instance ShATermLG DGLinkOrigin where
  toShATermLG att0 xv = case xv of
    SeeTarget -> return $ addATerm (ShAAppl "SeeTarget" [] []) att0
    SeeSource -> return $ addATerm (ShAAppl "SeeSource" [] []) att0
    TEST -> return $ addATerm (ShAAppl "TEST" [] []) att0
    DGImpliesLink -> return $ addATerm (ShAAppl "DGImpliesLink" [] []) att0
    DGLinkExtension -> return $ addATerm (ShAAppl "DGLinkExtension" [] []) att0
    DGLinkTranslation ->
      return $ addATerm (ShAAppl "DGLinkTranslation" [] []) att0
    DGLinkClosedLenv ->
      return $ addATerm (ShAAppl "DGLinkClosedLenv" [] []) att0
    DGLinkImports -> return $ addATerm (ShAAppl "DGLinkImports" [] []) att0
    DGLinkMorph a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DGLinkMorph" [a'] []) att1
    DGLinkInst a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "DGLinkInst" [a', b'] []) att2
    DGLinkInstArg a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DGLinkInstArg" [a'] []) att1
    DGLinkView a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "DGLinkView" [a', b'] []) att2
    DGLinkFitView a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DGLinkFitView" [a'] []) att1
    DGLinkFitViewImp a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DGLinkFitViewImp" [a'] []) att1
    DGLinkProof -> return $ addATerm (ShAAppl "DGLinkProof" [] []) att0
    DGLinkFlatteningUnion ->
      return $ addATerm (ShAAppl "DGLinkFlatteningUnion" [] []) att0
    DGLinkFlatteningRename ->
      return $ addATerm (ShAAppl "DGLinkFlatteningRename" [] []) att0
    DGLinkRefinement a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DGLinkRefinement" [a'] []) att1
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "SeeTarget" [] _ -> (att0, SeeTarget)
    ShAAppl "SeeSource" [] _ -> (att0, SeeSource)
    ShAAppl "TEST" [] _ -> (att0, TEST)
    ShAAppl "DGImpliesLink" [] _ -> (att0, DGImpliesLink)
    ShAAppl "DGLinkExtension" [] _ -> (att0, DGLinkExtension)
    ShAAppl "DGLinkTranslation" [] _ -> (att0, DGLinkTranslation)
    ShAAppl "DGLinkClosedLenv" [] _ -> (att0, DGLinkClosedLenv)
    ShAAppl "DGLinkImports" [] _ -> (att0, DGLinkImports)
    ShAAppl "DGLinkMorph" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DGLinkMorph a') }
    ShAAppl "DGLinkInst" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, DGLinkInst a' b') }}
    ShAAppl "DGLinkInstArg" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DGLinkInstArg a') }
    ShAAppl "DGLinkView" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, DGLinkView a' b') }}
    ShAAppl "DGLinkFitView" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DGLinkFitView a') }
    ShAAppl "DGLinkFitViewImp" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DGLinkFitViewImp a') }
    ShAAppl "DGLinkProof" [] _ -> (att0, DGLinkProof)
    ShAAppl "DGLinkFlatteningUnion" [] _ -> (att0, DGLinkFlatteningUnion)
    ShAAppl "DGLinkFlatteningRename" [] _ -> (att0, DGLinkFlatteningRename)
    ShAAppl "DGLinkRefinement" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DGLinkRefinement a') }
    u -> fromShATermError "DGLinkOrigin" u

instance ShATermLG Fitted where
  toShATermLG att0 xv = case xv of
    Fitted a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "Fitted" [a'] []) att1
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "Fitted" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, Fitted a') }
    u -> fromShATermError "Fitted" u

instance ShATermLG DGNodeLab where
  toShATermLG att0 xv = case xv of
    DGNodeLab a b c d e f g h i j k l m n -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      (att3, c') <- toShATermLG' att2 c
      (att4, d') <- toShATermLG' att3 d
      (att5, e') <- toShATermLG' att4 e
      (att6, f') <- toShATermLG' att5 f
      (att7, g') <- toShATermLG' att6 g
      (att8, h') <- toShATermLG' att7 h
      (att9, i') <- toShATermLG' att8 i
      (att10, j') <- toShATermLG' att9 j
      (att11, k') <- toShATermLG' att10 k
      (att12, l') <- toShATermLG' att11 l
      (att13, m') <- toShATermLG' att12 m
      (att14, n') <- toShATermLG' att13 n
      return $ addATerm (ShAAppl "DGNodeLab" [a', b', c', d', e', f', g',
                                              h', i', j', k', l', m', n'] []) att14
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "DGNodeLab" [a, b, c, d, e, f, g, h, i, j, k, l, m, n] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      case fromShATermLG' lg c att2 of
      { (att3, c') ->
      case fromShATermLG' lg d att3 of
      { (att4, d') ->
      case fromShATermLG' lg e att4 of
      { (att5, e') ->
      case fromShATermLG' lg f att5 of
      { (att6, f') ->
      case fromShATermLG' lg g att6 of
      { (att7, g') ->
      case fromShATermLG' lg h att7 of
      { (att8, h') ->
      case fromShATermLG' lg i att8 of
      { (att9, i') ->
      case fromShATermLG' lg j att9 of
      { (att10, j') ->
      case fromShATermLG' lg k att10 of
      { (att11, k') ->
      case fromShATermLG' lg l att11 of
      { (att12, l') ->
      case fromShATermLG' lg m att12 of
      { (att13, m') ->
      case fromShATermLG' lg n att13 of
      { (att14, n') ->
      (att14, DGNodeLab a' b' c' d' e' f' g' h' i' j' k' l' m'
              n') }}}}}}}}}}}}}}
    u -> fromShATermError "DGNodeLab" u

instance ShATermLG DGNodeInfo where
  toShATermLG att0 xv = case xv of
    DGNode a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "DGNode" [a', b'] []) att2
    DGRef a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "DGRef" [a', b'] []) att2
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "DGNode" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, DGNode a' b') }}
    ShAAppl "DGRef" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, DGRef a' b') }}
    u -> fromShATermError "DGNodeInfo" u

instance ShATermLG DGOrigin where
  toShATermLG att0 xv = case xv of
    DGEmpty -> return $ addATerm (ShAAppl "DGEmpty" [] []) att0
    DGBasic -> return $ addATerm (ShAAppl "DGBasic" [] []) att0
    DGBasicSpec a b c -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      (att3, c') <- toShATermLG' att2 c
      return $ addATerm (ShAAppl "DGBasicSpec" [a', b', c'] []) att3
    DGExtension -> return $ addATerm (ShAAppl "DGExtension" [] []) att0
    DGLogicCoercion -> return $ addATerm (ShAAppl "DGLogicCoercion" [] []) att0
    DGTranslation a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DGTranslation" [a'] []) att1
    DGUnion -> return $ addATerm (ShAAppl "DGUnion" [] []) att0
    DGRestriction a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "DGRestriction" [a', b'] []) att2
    DGRevealTranslation ->
      return $ addATerm (ShAAppl "DGRevealTranslation" [] []) att0
    DGFreeOrCofree a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DGFreeOrCofree" [a'] []) att1
    DGLocal -> return $ addATerm (ShAAppl "DGLocal" [] []) att0
    DGClosed -> return $ addATerm (ShAAppl "DGClosed" [] []) att0
    DGLogicQual -> return $ addATerm (ShAAppl "DGLogicQual" [] []) att0
    DGData -> return $ addATerm (ShAAppl "DGData" [] []) att0
    DGFormalParams -> return $ addATerm (ShAAppl "DGFormalParams" [] []) att0
    DGImports -> return $ addATerm (ShAAppl "DGImports" [] []) att0
    DGInst a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DGInst" [a'] []) att1
    DGFitSpec -> return $ addATerm (ShAAppl "DGFitSpec" [] []) att0
    DGFitView a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DGFitView" [a'] []) att1
    DGProof -> return $ addATerm (ShAAppl "DGProof" [] []) att0
    DGNormalForm a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "DGNormalForm" [a'] []) att1
    DGintegratedSCC -> return $ addATerm (ShAAppl "DGintegratedSCC" [] []) att0
    DGFlattening -> return $ addATerm (ShAAppl "DGFlattening" [] []) att0
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "DGEmpty" [] _ -> (att0, DGEmpty)
    ShAAppl "DGBasic" [] _ -> (att0, DGBasic)
    ShAAppl "DGBasicSpec" [a, b, c] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      case fromShATermLG' lg c att2 of
      { (att3, c') ->
      (att3, DGBasicSpec a' b' c') }}}
    ShAAppl "DGExtension" [] _ -> (att0, DGExtension)
    ShAAppl "DGLogicCoercion" [] _ -> (att0, DGLogicCoercion)
    ShAAppl "DGTranslation" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DGTranslation a') }
    ShAAppl "DGUnion" [] _ -> (att0, DGUnion)
    ShAAppl "DGRestriction" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, DGRestriction a' b') }}
    ShAAppl "DGRevealTranslation" [] _ -> (att0, DGRevealTranslation)
    ShAAppl "DGFreeOrCofree" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DGFreeOrCofree a') }
    ShAAppl "DGLocal" [] _ -> (att0, DGLocal)
    ShAAppl "DGClosed" [] _ -> (att0, DGClosed)
    ShAAppl "DGLogicQual" [] _ -> (att0, DGLogicQual)
    ShAAppl "DGData" [] _ -> (att0, DGData)
    ShAAppl "DGFormalParams" [] _ -> (att0, DGFormalParams)
    ShAAppl "DGImports" [] _ -> (att0, DGImports)
    ShAAppl "DGInst" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DGInst a') }
    ShAAppl "DGFitSpec" [] _ -> (att0, DGFitSpec)
    ShAAppl "DGFitView" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DGFitView a') }
    ShAAppl "DGProof" [] _ -> (att0, DGProof)
    ShAAppl "DGNormalForm" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, DGNormalForm a') }
    ShAAppl "DGintegratedSCC" [] _ -> (att0, DGintegratedSCC)
    ShAAppl "DGFlattening" [] _ -> (att0, DGFlattening)
    u -> fromShATermError "DGOrigin" u

instance ShATermLG MaybeRestricted where
  toShATermLG att0 xv = case xv of
    NoRestriction -> return $ addATerm (ShAAppl "NoRestriction" [] []) att0
    Restricted a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "Restricted" [a'] []) att1
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "NoRestriction" [] _ -> (att0, NoRestriction)
    ShAAppl "Restricted" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, Restricted a') }
    u -> fromShATermError "MaybeRestricted" u

instance ShATermLG Renamed where
  toShATermLG att0 xv = case xv of
    Renamed a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "Renamed" [a'] []) att1
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "Renamed" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, Renamed a') }
    u -> fromShATermError "Renamed" u

instance ShATermLG MaybeNode where
  toShATermLG att0 xv = case xv of
    JustNode a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "JustNode" [a'] []) att1
    EmptyNode a -> do
      (att1, a') <- toShATermLG' att0 a
      return $ addATerm (ShAAppl "EmptyNode" [a'] []) att1
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "JustNode" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, JustNode a') }
    ShAAppl "EmptyNode" [a] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      (att1, EmptyNode a') }
    u -> fromShATermError "MaybeNode" u

instance ShATermLG NodeSig where
  toShATermLG att0 xv = case xv of
    NodeSig a b -> do
      (att1, a') <- toShATermLG' att0 a
      (att2, b') <- toShATermLG' att1 b
      return $ addATerm (ShAAppl "NodeSig" [a', b'] []) att2
  fromShATermLG lg ix att0 = case getShATerm ix att0 of
    ShAAppl "NodeSig" [a, b] _ ->
      case fromShATermLG' lg a att0 of
      { (att1, a') ->
      case fromShATermLG' lg b att1 of
      { (att2, b') ->
      (att2, NodeSig a' b') }}
    u -> fromShATermError "NodeSig" u

_tcDGraphTc :: TyCon
_tcDGraphTc = mkTyCon "Static.DevGraph.DGraph"
instance Typeable DGraph where
    typeOf _ = mkTyConApp _tcDGraphTc []

_tcDiagTc :: TyCon
_tcDiagTc = mkTyCon "Static.DevGraph.Diag"
instance Typeable Diag where
    typeOf _ = mkTyConApp _tcDiagTc []

_tcDiagLinkLabTc :: TyCon
_tcDiagLinkLabTc = mkTyCon "Static.DevGraph.DiagLinkLab"
instance Typeable DiagLinkLab where
    typeOf _ = mkTyConApp _tcDiagLinkLabTc []

_tcDiagNodeLabTc :: TyCon
_tcDiagNodeLabTc = mkTyCon "Static.DevGraph.DiagNodeLab"
instance Typeable DiagNodeLab where
    typeOf _ = mkTyConApp _tcDiagNodeLabTc []

_tcRTLinkLabTc :: TyCon
_tcRTLinkLabTc = mkTyCon "Static.DevGraph.RTLinkLab"
instance Typeable RTLinkLab where
    typeOf _ = mkTyConApp _tcRTLinkLabTc []

_tcRTLinkTypeTc :: TyCon
_tcRTLinkTypeTc = mkTyCon "Static.DevGraph.RTLinkType"
instance Typeable RTLinkType where
    typeOf _ = mkTyConApp _tcRTLinkTypeTc []

_tcRTNodeLabTc :: TyCon
_tcRTNodeLabTc = mkTyCon "Static.DevGraph.RTNodeLab"
instance Typeable RTNodeLab where
    typeOf _ = mkTyConApp _tcRTNodeLabTc []

_tcRTNodeTypeTc :: TyCon
_tcRTNodeTypeTc = mkTyCon "Static.DevGraph.RTNodeType"
instance Typeable RTNodeType where
    typeOf _ = mkTyConApp _tcRTNodeTypeTc []

_tcHistElemTc :: TyCon
_tcHistElemTc = mkTyCon "Static.DevGraph.HistElem"
instance Typeable HistElem where
    typeOf _ = mkTyConApp _tcHistElemTc []

_tcDGChangeTc :: TyCon
_tcDGChangeTc = mkTyCon "Static.DevGraph.DGChange"
instance Typeable DGChange where
    typeOf _ = mkTyConApp _tcDGChangeTc []

_tcGlobalEntryTc :: TyCon
_tcGlobalEntryTc = mkTyCon "Static.DevGraph.GlobalEntry"
instance Typeable GlobalEntry where
    typeOf _ = mkTyConApp _tcGlobalEntryTc []

_tcBranchSigTc :: TyCon
_tcBranchSigTc = mkTyCon "Static.DevGraph.BranchSig"
instance Typeable BranchSig where
    typeOf _ = mkTyConApp _tcBranchSigTc []

_tcRefSigTc :: TyCon
_tcRefSigTc = mkTyCon "Static.DevGraph.RefSig"
instance Typeable RefSig where
    typeOf _ = mkTyConApp _tcRefSigTc []

_tcImpUnitSigOrSigTc :: TyCon
_tcImpUnitSigOrSigTc = mkTyCon "Static.DevGraph.ImpUnitSigOrSig"
instance Typeable ImpUnitSigOrSig where
    typeOf _ = mkTyConApp _tcImpUnitSigOrSigTc []

_tcUnitSigTc :: TyCon
_tcUnitSigTc = mkTyCon "Static.DevGraph.UnitSig"
instance Typeable UnitSig where
    typeOf _ = mkTyConApp _tcUnitSigTc []

_tcExtViewSigTc :: TyCon
_tcExtViewSigTc = mkTyCon "Static.DevGraph.ExtViewSig"
instance Typeable ExtViewSig where
    typeOf _ = mkTyConApp _tcExtViewSigTc []

_tcExtGenSigTc :: TyCon
_tcExtGenSigTc = mkTyCon "Static.DevGraph.ExtGenSig"
instance Typeable ExtGenSig where
    typeOf _ = mkTyConApp _tcExtGenSigTc []

_tcGenSigTc :: TyCon
_tcGenSigTc = mkTyCon "Static.DevGraph.GenSig"
instance Typeable GenSig where
    typeOf _ = mkTyConApp _tcGenSigTc []

_tcDGLinkLabTc :: TyCon
_tcDGLinkLabTc = mkTyCon "Static.DevGraph.DGLinkLab"
instance Typeable DGLinkLab where
    typeOf _ = mkTyConApp _tcDGLinkLabTc []

_tcDGLinkTypeTc :: TyCon
_tcDGLinkTypeTc = mkTyCon "Static.DevGraph.DGLinkType"
instance Typeable DGLinkType where
    typeOf _ = mkTyConApp _tcDGLinkTypeTc []

_tcDGLinkOriginTc :: TyCon
_tcDGLinkOriginTc = mkTyCon "Static.DevGraph.DGLinkOrigin"
instance Typeable DGLinkOrigin where
    typeOf _ = mkTyConApp _tcDGLinkOriginTc []

_tcFittedTc :: TyCon
_tcFittedTc = mkTyCon "Static.DevGraph.Fitted"
instance Typeable Fitted where
    typeOf _ = mkTyConApp _tcFittedTc []

_tcDGNodeLabTc :: TyCon
_tcDGNodeLabTc = mkTyCon "Static.DevGraph.DGNodeLab"
instance Typeable DGNodeLab where
    typeOf _ = mkTyConApp _tcDGNodeLabTc []

_tcDGNodeInfoTc :: TyCon
_tcDGNodeInfoTc = mkTyCon "Static.DevGraph.DGNodeInfo"
instance Typeable DGNodeInfo where
    typeOf _ = mkTyConApp _tcDGNodeInfoTc []

_tcDGOriginTc :: TyCon
_tcDGOriginTc = mkTyCon "Static.DevGraph.DGOrigin"
instance Typeable DGOrigin where
    typeOf _ = mkTyConApp _tcDGOriginTc []

_tcMaybeRestrictedTc :: TyCon
_tcMaybeRestrictedTc = mkTyCon "Static.DevGraph.MaybeRestricted"
instance Typeable MaybeRestricted where
    typeOf _ = mkTyConApp _tcMaybeRestrictedTc []

_tcRenamedTc :: TyCon
_tcRenamedTc = mkTyCon "Static.DevGraph.Renamed"
instance Typeable Renamed where
    typeOf _ = mkTyConApp _tcRenamedTc []

_tcMaybeNodeTc :: TyCon
_tcMaybeNodeTc = mkTyCon "Static.DevGraph.MaybeNode"
instance Typeable MaybeNode where
    typeOf _ = mkTyConApp _tcMaybeNodeTc []

_tcNodeSigTc :: TyCon
_tcNodeSigTc = mkTyCon "Static.DevGraph.NodeSig"
instance Typeable NodeSig where
    typeOf _ = mkTyConApp _tcNodeSigTc []
