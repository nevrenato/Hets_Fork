{-# OPTIONS -w -O0 #-}
{- |
Module      :  ATC/Consistency.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'Common.Consistency.Conservativity'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
Common/Consistency.hs
-}

module ATC.Consistency () where

import ATerm.Lib
import Common.AS_Annotation
import Common.Consistency
import Common.Doc
import Common.DocUtils
import Common.Result
import Data.Char (toLower)
import Data.Typeable

{-! for Common.Consistency.Conservativity derive : Typeable !-}

{-! for Common.Consistency.Conservativity derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

instance ShATermConvertible Conservativity where
  toShATermAux att0 xv = case xv of
    Inconsistent -> return $ addATerm (ShAAppl "Inconsistent" [] []) att0
    Unknown a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Unknown" [a'] []) att1
    None -> return $ addATerm (ShAAppl "None" [] []) att0
    PCons -> return $ addATerm (ShAAppl "PCons" [] []) att0
    Cons -> return $ addATerm (ShAAppl "Cons" [] []) att0
    Mono -> return $ addATerm (ShAAppl "Mono" [] []) att0
    Def -> return $ addATerm (ShAAppl "Def" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Inconsistent" [] _ -> (att0, Inconsistent)
    ShAAppl "Unknown" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Unknown a') }
    ShAAppl "None" [] _ -> (att0, None)
    ShAAppl "PCons" [] _ -> (att0, PCons)
    ShAAppl "Cons" [] _ -> (att0, Cons)
    ShAAppl "Mono" [] _ -> (att0, Mono)
    ShAAppl "Def" [] _ -> (att0, Def)
    u -> fromShATermError "Conservativity" u

_tcConservativityTc :: TyCon
_tcConservativityTc = mkTyCon "Common.Consistency.Conservativity"
instance Typeable Conservativity where
    typeOf _ = mkTyConApp _tcConservativityTc []
