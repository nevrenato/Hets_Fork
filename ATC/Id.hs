{-# OPTIONS -w -O0 #-}
{- |
Module      :  ATC/Id.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'Common.Id.Pos'
'Common.Id.Range'
'Common.Id.Token'
'Common.Id.Id'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
Common/Id.hs
-}

module ATC.Id () where

import ATerm.Lib
import Common.Id
import Data.Char
import Data.List (isPrefixOf)
import Data.Typeable
import qualified Data.Set as Set

{-! for Common.Id.Pos derive : Typeable !-}
{-! for Common.Id.Range derive : Typeable !-}
{-! for Common.Id.Token derive : Typeable !-}
{-! for Common.Id.Id derive : Typeable !-}

{-! for Common.Id.Pos derive : ShATermConvertible !-}
{-! for Common.Id.Range derive : ShATermConvertible !-}
{-! for Common.Id.Token derive : ShATermConvertible !-}
{-! for Common.Id.Id derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

_tcPosTc :: TyCon
_tcPosTc = mkTyCon "Common.Id.Pos"
instance Typeable Pos where
    typeOf _ = mkTyConApp _tcPosTc []

_tcRangeTc :: TyCon
_tcRangeTc = mkTyCon "Common.Id.Range"
instance Typeable Range where
    typeOf _ = mkTyConApp _tcRangeTc []

_tcTokenTc :: TyCon
_tcTokenTc = mkTyCon "Common.Id.Token"
instance Typeable Token where
    typeOf _ = mkTyConApp _tcTokenTc []

_tcIdTc :: TyCon
_tcIdTc = mkTyCon "Common.Id.Id"
instance Typeable Id where
    typeOf _ = mkTyConApp _tcIdTc []

instance ShATermConvertible Pos where
  toShATermAux att0 xv = case xv of
    SourcePos a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "SourcePos" [a', b', c'] []) att3
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "SourcePos" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, SourcePos a' b' c') }}}
    u -> fromShATermError "Pos" u

instance ShATermConvertible Range where
  toShATermAux att0 xv = case xv of
    Range a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Range" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Range" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Range a') }
    u -> fromShATermError "Range" u

instance ShATermConvertible Token where
  toShATermAux att0 xv = case xv of
    Token a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Token" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Token" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Token a' b') }}
    u -> fromShATermError "Token" u

instance ShATermConvertible Id where
  toShATermAux att0 xv = case xv of
    Id a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "Id" [a', b', c'] []) att3
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Id" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, Id a' b' c') }}}
    u -> fromShATermError "Id" u
