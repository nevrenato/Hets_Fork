{-# OPTIONS -w -O0 #-}
{- |
Module      :  ATC/AS_Annotation.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'Common.AS_Annotation.Annote_word'
'Common.AS_Annotation.Annote_text'
'Common.AS_Annotation.Display_format'
'Common.AS_Annotation.PrecRel'
'Common.AS_Annotation.AssocEither'
'Common.AS_Annotation.Semantic_anno'
'Common.AS_Annotation.Annotation'
'Common.AS_Annotation.Annoted'
'Common.AS_Annotation.SenAttr'
'Common.AS_Annotation.Name'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
Common/AS_Annotation.der.hs
-}

module ATC.AS_Annotation () where

import ATC.IRI
import ATerm.Lib
import Common.AS_Annotation
import Common.ATerm.ConvInstances
import Common.IRI (IRI)
import Common.Id
import Data.Maybe
import Data.Typeable

{-! for Common.AS_Annotation.Annote_word derive : Typeable !-}
{-! for Common.AS_Annotation.Annote_text derive : Typeable !-}
{-! for Common.AS_Annotation.Display_format derive : Typeable !-}
{-! for Common.AS_Annotation.PrecRel derive : Typeable !-}
{-! for Common.AS_Annotation.AssocEither derive : Typeable !-}
{-! for Common.AS_Annotation.Semantic_anno derive : Typeable !-}
{-! for Common.AS_Annotation.Annotation derive : Typeable !-}
{-! for Common.AS_Annotation.Annoted derive : Typeable !-}
{-! for Common.AS_Annotation.SenAttr derive : Typeable !-}
{-! for Common.AS_Annotation.Name derive : Typeable !-}

{-! for Common.AS_Annotation.Annote_word derive : ShATermConvertible !-}
{-! for Common.AS_Annotation.Annote_text derive : ShATermConvertible !-}
{-! for Common.AS_Annotation.Display_format derive : ShATermConvertible !-}
{-! for Common.AS_Annotation.PrecRel derive : ShATermConvertible !-}
{-! for Common.AS_Annotation.AssocEither derive : ShATermConvertible !-}
{-! for Common.AS_Annotation.Semantic_anno derive : ShATermConvertible !-}
{-! for Common.AS_Annotation.Annotation derive : ShATermConvertible !-}
{-! for Common.AS_Annotation.Annoted derive : ShATermConvertible !-}
{-! for Common.AS_Annotation.SenAttr derive : ShATermConvertible !-}
{-! for Common.AS_Annotation.Name derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

instance ShATermConvertible Name where
  toShATermAux att0 xv = case xv of
    Name a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Name" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Name" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Name a') }
    u -> fromShATermError "Name" u

instance (ShATermConvertible s,
          ShATermConvertible a) => ShATermConvertible (SenAttr s a) where
  toShATermAux att0 xv = case xv of
    SenAttr a b c d e f g -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      (att5, e') <- toShATerm' att4 e
      (att6, f') <- toShATerm' att5 f
      (att7, g') <- toShATerm' att6 g
      return $ addATerm (ShAAppl "SenAttr" [a', b', c', d', e', f',
                                            g'] []) att7
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "SenAttr" [a, b, c, d, e, f, g] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      case fromShATerm' e att4 of
      { (att5, e') ->
      case fromShATerm' f att5 of
      { (att6, f') ->
      case fromShATerm' g att6 of
      { (att7, g') ->
      (att7, SenAttr a' b' c' d' e' f' g') }}}}}}}
    u -> fromShATermError "SenAttr" u

instance ShATermConvertible a => ShATermConvertible (Annoted a) where
  toShATermAux att0 xv = case xv of
    Annoted a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "Annoted" [a', b', c', d'] []) att4
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Annoted" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, Annoted a' b' c' d') }}}}
    u -> fromShATermError "Annoted" u

instance ShATermConvertible Annotation where
  toShATermAux att0 xv = case xv of
    Unparsed_anno a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "Unparsed_anno" [a', b', c'] []) att3
    Display_anno a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "Display_anno" [a', b', c'] []) att3
    List_anno a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "List_anno" [a', b', c', d'] []) att4
    Number_anno a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Number_anno" [a', b'] []) att2
    Float_anno a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "Float_anno" [a', b', c'] []) att3
    String_anno a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "String_anno" [a', b', c'] []) att3
    Prec_anno a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "Prec_anno" [a', b', c', d'] []) att4
    Assoc_anno a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "Assoc_anno" [a', b', c'] []) att3
    Label a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Label" [a', b'] []) att2
    Prefix_anno a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Prefix_anno" [a', b'] []) att2
    Semantic_anno a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "Semantic_anno" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Unparsed_anno" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, Unparsed_anno a' b' c') }}}
    ShAAppl "Display_anno" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, Display_anno a' b' c') }}}
    ShAAppl "List_anno" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, List_anno a' b' c' d') }}}}
    ShAAppl "Number_anno" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Number_anno a' b') }}
    ShAAppl "Float_anno" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, Float_anno a' b' c') }}}
    ShAAppl "String_anno" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, String_anno a' b' c') }}}
    ShAAppl "Prec_anno" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, Prec_anno a' b' c' d') }}}}
    ShAAppl "Assoc_anno" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, Assoc_anno a' b' c') }}}
    ShAAppl "Label" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Label a' b') }}
    ShAAppl "Prefix_anno" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Prefix_anno a' b') }}
    ShAAppl "Semantic_anno" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, Semantic_anno a' b') }}
    u -> fromShATermError "Annotation" u

instance ShATermConvertible Semantic_anno where
  toShATermAux att0 xv = case xv of
    SA_cons -> return $ addATerm (ShAAppl "SA_cons" [] []) att0
    SA_def -> return $ addATerm (ShAAppl "SA_def" [] []) att0
    SA_implies -> return $ addATerm (ShAAppl "SA_implies" [] []) att0
    SA_mono -> return $ addATerm (ShAAppl "SA_mono" [] []) att0
    SA_implied -> return $ addATerm (ShAAppl "SA_implied" [] []) att0
    SA_mcons -> return $ addATerm (ShAAppl "SA_mcons" [] []) att0
    SA_ccons -> return $ addATerm (ShAAppl "SA_ccons" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "SA_cons" [] _ -> (att0, SA_cons)
    ShAAppl "SA_def" [] _ -> (att0, SA_def)
    ShAAppl "SA_implies" [] _ -> (att0, SA_implies)
    ShAAppl "SA_mono" [] _ -> (att0, SA_mono)
    ShAAppl "SA_implied" [] _ -> (att0, SA_implied)
    ShAAppl "SA_mcons" [] _ -> (att0, SA_mcons)
    ShAAppl "SA_ccons" [] _ -> (att0, SA_ccons)
    u -> fromShATermError "Semantic_anno" u

instance ShATermConvertible AssocEither where
  toShATermAux att0 xv = case xv of
    ALeft -> return $ addATerm (ShAAppl "ALeft" [] []) att0
    ARight -> return $ addATerm (ShAAppl "ARight" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "ALeft" [] _ -> (att0, ALeft)
    ShAAppl "ARight" [] _ -> (att0, ARight)
    u -> fromShATermError "AssocEither" u

instance ShATermConvertible PrecRel where
  toShATermAux att0 xv = case xv of
    Higher -> return $ addATerm (ShAAppl "Higher" [] []) att0
    Lower -> return $ addATerm (ShAAppl "Lower" [] []) att0
    BothDirections -> return $ addATerm (ShAAppl "BothDirections" [] []) att0
    NoDirection -> return $ addATerm (ShAAppl "NoDirection" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Higher" [] _ -> (att0, Higher)
    ShAAppl "Lower" [] _ -> (att0, Lower)
    ShAAppl "BothDirections" [] _ -> (att0, BothDirections)
    ShAAppl "NoDirection" [] _ -> (att0, NoDirection)
    u -> fromShATermError "PrecRel" u

instance ShATermConvertible Display_format where
  toShATermAux att0 xv = case xv of
    DF_HTML -> return $ addATerm (ShAAppl "DF_HTML" [] []) att0
    DF_LATEX -> return $ addATerm (ShAAppl "DF_LATEX" [] []) att0
    DF_RTF -> return $ addATerm (ShAAppl "DF_RTF" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "DF_HTML" [] _ -> (att0, DF_HTML)
    ShAAppl "DF_LATEX" [] _ -> (att0, DF_LATEX)
    ShAAppl "DF_RTF" [] _ -> (att0, DF_RTF)
    u -> fromShATermError "Display_format" u

instance ShATermConvertible Annote_text where
  toShATermAux att0 xv = case xv of
    Line_anno a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Line_anno" [a'] []) att1
    Group_anno a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Group_anno" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Line_anno" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Line_anno a') }
    ShAAppl "Group_anno" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Group_anno a') }
    u -> fromShATermError "Annote_text" u

instance ShATermConvertible Annote_word where
  toShATermAux att0 xv = case xv of
    Annote_word a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Annote_word" [a'] []) att1
    Comment_start -> return $ addATerm (ShAAppl "Comment_start" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Annote_word" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Annote_word a') }
    ShAAppl "Comment_start" [] _ -> (att0, Comment_start)
    u -> fromShATermError "Annote_word" u

_tcNameTc :: TyCon
_tcNameTc = mkTyCon "Common.AS_Annotation.Name"
instance Typeable Name where
    typeOf _ = mkTyConApp _tcNameTc []

_tcSenAttrTc :: TyCon
_tcSenAttrTc = mkTyCon "Common.AS_Annotation.SenAttr"
instance Typeable2 SenAttr where
    typeOf2 _ = mkTyConApp _tcSenAttrTc []

_tcAnnotedTc :: TyCon
_tcAnnotedTc = mkTyCon "Common.AS_Annotation.Annoted"
instance Typeable1 Annoted where
    typeOf1 _ = mkTyConApp _tcAnnotedTc []

_tcAnnotationTc :: TyCon
_tcAnnotationTc = mkTyCon "Common.AS_Annotation.Annotation"
instance Typeable Annotation where
    typeOf _ = mkTyConApp _tcAnnotationTc []

_tcSemantic_annoTc :: TyCon
_tcSemantic_annoTc = mkTyCon "Common.AS_Annotation.Semantic_anno"
instance Typeable Semantic_anno where
    typeOf _ = mkTyConApp _tcSemantic_annoTc []

_tcAssocEitherTc :: TyCon
_tcAssocEitherTc = mkTyCon "Common.AS_Annotation.AssocEither"
instance Typeable AssocEither where
    typeOf _ = mkTyConApp _tcAssocEitherTc []

_tcPrecRelTc :: TyCon
_tcPrecRelTc = mkTyCon "Common.AS_Annotation.PrecRel"
instance Typeable PrecRel where
    typeOf _ = mkTyConApp _tcPrecRelTc []

_tcDisplay_formatTc :: TyCon
_tcDisplay_formatTc = mkTyCon "Common.AS_Annotation.Display_format"
instance Typeable Display_format where
    typeOf _ = mkTyConApp _tcDisplay_formatTc []

_tcAnnote_textTc :: TyCon
_tcAnnote_textTc = mkTyCon "Common.AS_Annotation.Annote_text"
instance Typeable Annote_text where
    typeOf _ = mkTyConApp _tcAnnote_textTc []

_tcAnnote_wordTc :: TyCon
_tcAnnote_wordTc = mkTyCon "Common.AS_Annotation.Annote_word"
instance Typeable Annote_word where
    typeOf _ = mkTyConApp _tcAnnote_wordTc []
