{-# OPTIONS -w -O0 #-}
{- |
Module      :  ATC/DefaultMorphism.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'Common.DefaultMorphism.DefaultMorphism'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
Common/DefaultMorphism.hs
-}

module ATC.DefaultMorphism () where

import ATerm.Lib
import Common.DefaultMorphism
import Common.Doc
import Common.DocUtils
import Common.Keywords
import Data.Typeable

{-! for Common.DefaultMorphism.DefaultMorphism derive : Typeable !-}

{-! for Common.DefaultMorphism.DefaultMorphism derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

_tcDefaultMorphismTc :: TyCon
_tcDefaultMorphismTc = mkTyCon "Common.DefaultMorphism.DefaultMorphism"
instance Typeable1 DefaultMorphism where
    typeOf1 _ = mkTyConApp _tcDefaultMorphismTc []

instance ShATermConvertible sign => ShATermConvertible (DefaultMorphism sign) where
  toShATermAux att0 xv = case xv of
    MkMorphism a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "MkMorphism" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "MkMorphism" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, MkMorphism a' b') }}
    u -> fromShATermError "DefaultMorphism" u
