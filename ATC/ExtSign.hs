{-# OPTIONS -w -O0 #-}
{- |
Module      :  ATC/ExtSign.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'Common.ExtSign.ExtSign'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
Common/ExtSign.hs
-}

module ATC.ExtSign () where

import ATerm.Lib
import Common.ATerm.ConvInstances
import Common.Doc
import Common.DocUtils
import Common.ExtSign
import Data.Typeable
import qualified Data.Set as Set

{-! for Common.ExtSign.ExtSign derive : Typeable !-}

{-! for Common.ExtSign.ExtSign derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

instance (Ord symbol, ShATermConvertible sign,
          ShATermConvertible symbol) => ShATermConvertible (ExtSign sign symbol) where
  toShATermAux att0 xv = case xv of
    ExtSign a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "ExtSign" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "ExtSign" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, ExtSign a' b') }}
    u -> fromShATermError "ExtSign" u

_tcExtSignTc :: TyCon
_tcExtSignTc = mkTyCon "Common.ExtSign.ExtSign"
instance Typeable2 ExtSign where
    typeOf2 _ = mkTyConApp _tcExtSignTc []
